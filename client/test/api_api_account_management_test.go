/*
Rudder API

Testing APIAccountManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rudderclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_rudderclient_APIAccountManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test APIAccountManagementAPIService CreateAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.APIAccountManagementAPI.CreateAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIAccountManagementAPIService DeleteAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiAccountId string

		resp, httpRes, err := apiClient.APIAccountManagementAPI.DeleteAccount(context.Background(), apiAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIAccountManagementAPIService GetAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiAccountId string

		resp, httpRes, err := apiClient.APIAccountManagementAPI.GetAccount(context.Background(), apiAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIAccountManagementAPIService GetAllAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.APIAccountManagementAPI.GetAllAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIAccountManagementAPIService RegenerateToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiAccountId string

		resp, httpRes, err := apiClient.APIAccountManagementAPI.RegenerateToken(context.Background(), apiAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIAccountManagementAPIService UpdateAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiAccountId string

		resp, httpRes, err := apiClient.APIAccountManagementAPI.UpdateAccount(context.Background(), apiAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
